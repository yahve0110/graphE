{"version":3,"sources":["components/screens/home/profile/userprofile/UserProfile.jsx","components/screens/home/charts/BarChart.jsx","components/screens/home/charts/PieChart.jsx","components/screens/home/profile/Skills/Skils.jsx","components/screens/home/profile/userproject/UserProject.jsx","components/screens/auth/logout/Logout.jsx","components/screens/auth/LoginPage.jsx","index.js"],"names":["UserProfile","_ref","token","user","setUser","useState","isLoading","setIsLoading","error","setError","useEffect","async","response","fetch","method","headers","Authorization","Content-Type","body","JSON","stringify","query","result","json","data","getUserProfile","React","createElement","message","className","id","login","firstName","lastName","email","campus","auditRatio","BarChart","style","chartWidth","Object","keys","length","maxValue","Math","max","values","overflowX","width","height","viewBox","transform","x1","y1","x2","y2","stroke","Array","from","_","i","key","x","y","chartHeight","textAnchor","fontSize","fill","round","entries","map","_ref2","index","skill","value","rx","barWidth","replace","PieChart","filteredData","filter","total","reduce","acc","_ref3","getCoordinatesForPercent","percent","chartSize","cos","PI","sin","cumulativePercent","display","justifyContent","alignItems","padding","_ref4","startX","startY","endX","endY","pathData","join","d","alignmentBaseline","Skills","totalSkill","setTotalSkill","userId","setUserId","fetchUserId","limit","skillsOffset","totalSkillArr","hasMoreData","transaction","push","forEach","hasOwnProperty","type","amount","getTotalSkills","filteredSkills","maxWidth","boxSizing","flexWrap","marginBottom","flex","minWidth","gridTemplateColumns","gap","listStyleType","margin","UserProject","xpTransactions","setXPTransactions","selectedProjectPart","setSelectedProjectPart","currentPage","setCurrentPage","getUserXPTransactions","projectParts","Set","path","split","Boolean","filteredTransactions","indexOfLastTransaction","indexOfFirstTransaction","currentTransactions","slice","totalPages","ceil","paginate","pageNumber","pageButtons","startIdx","endIdx","onClick","onChange","e","target","part","pathParts","border","borderRadius","background","boxShadow","object","name","Date","createdAt","toLocaleString","listStyle","partIndex","Fragment","marginTop","Logout","navigate","useNavigate","handleLogout","localStorage","removeItem","window","location","reload","LoginPage","identifier","setIdentifier","password","setPassword","isLoggedIn","setIsLoggedIn","setToken","marginRight","Skils","onSubmit","preventDefault","axios","post","auth","username","setItem","err","console","htmlFor","router","createBrowserRouter","element","ReactDOM","createRoot","document","getElementById","render","StrictMode","RouterProvider"],"mappings":"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","file":"static/js/main.5745eea7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst UserProfile = ({ token }) => {\n    const [user, setUser] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const getUserProfile = async () => {\n            try {\n                const response = await fetch(\"https://01.kood.tech/api/graphql-engine/v1/graphql\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Authorization\": 'Bearer ' + token,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        query: `query {\n                            user {\n                                id\n                                login\n                                campus\n                                firstName\n                                lastName\n                                email\n                                auditRatio\n                            }\n                        }`,\n                    })\n                });\n\n                const result = await response.json();\n                // console.log(result);\n                setUser(result.data.user[0]);\n                setIsLoading(false);\n            } catch (error) {\n                setError(error);\n                setIsLoading(false);\n            }\n        };\n\n        getUserProfile();\n    }, [token]);\n\n    if (isLoading) {\n        return <div>Загрузка...</div>;\n    }\n\n    if (error) {\n        return <div>Ошибка: {error.message}</div>;\n    }\n\n    return (\n        <div>\n            <p><span className=\"red-label\">ID:</span> {user.id}</p>\n            <p><span className=\"red-label\">Login:</span> {user.login}</p>\n            <p><span className=\"red-label\">Name:</span> {user.firstName}</p>\n            <p><span className=\"red-label\">LastName:</span> {user.lastName}</p>\n            <p><span className=\"red-label\">Email:</span> {user.email}</p>\n            <p><span className=\"red-label\">Campus:</span> {user.campus}</p>\n            <p><span className=\"red-label\">Audit:</span> {user.auditRatio}</p>\n        </div>\n    );\n};\n\nexport default UserProfile;\n","import React from 'react';\n\n// Компонент для столбчатой диаграммы\nconst BarChart = ({ data, style }) => {\n    const barWidth = 20; // Ширина каждого столбца\n    const barSpacing = 20; // Расстояние между столбцами\n    const chartHeight = 400; // Высота диаграммы\n    const chartWidth = Object.keys(data).length * (barWidth + barSpacing); // Ширина диаграммы\n    const maxValue = Math.max(...Object.values(data)); // Максимальное значение для масштабирования\n\n    return (\n        <div style={{ ...style, overflowX: 'auto' }}>\n            <svg width=\"100%\" height=\"95%\" viewBox={`0 0 ${chartWidth + 100} ${chartHeight + 100}`}>\n                <g transform=\"translate(50, 10)\">\n                    {/* Ось Y */}\n                    <line x1=\"0\" y1=\"0\" x2=\"0\" y2={chartHeight} stroke=\"#333\" />\n                    {/* Подписи к оси Y */}\n                    {Array.from({ length: 6 }, (_, i) => (\n                        <text key={i} x=\"-10\" y={(chartHeight / 5) * i} textAnchor=\"end\" fontSize=\"12\" fill=\"#333\">\n                            {Math.round(maxValue - (maxValue / 5) * i)}\n                        </text>\n                    ))}\n                    {Object.entries(data).map(([skill, value], index) => (\n                        <g key={skill} transform={`translate(${index * (barWidth + barSpacing)}, 0)`}>\n                            {/* Столбец */}\n                            <rect\n                                x=\"0\"\n                                y={chartHeight - (value / maxValue) * chartHeight}\n                                width={barWidth}\n                                height={(value / maxValue) * chartHeight}\n                                fill=\"#3f51b5\"\n                                rx=\"5\"\n                            />\n                            {/* Значение столбца */}\n                            <text\n                                x={barWidth / 2}\n                                y={chartHeight - (value / maxValue) * chartHeight - 10}\n                                fontSize=\"12\"\n                                textAnchor=\"middle\"\n                                fill=\"#333\"\n                            >\n                                {value}\n                            </text>\n                            {/* Название навыка под углом 45 градусов */}\n                            <text\n                                x={barWidth / 2}\n                                y={chartHeight + 20}\n                                fontSize=\"12\"\n                                textAnchor=\"middle\"\n                                fill=\"#333\"\n                                transform={`rotate(45, ${barWidth / 2}, ${chartHeight + 20})`}\n                            >\n                                {skill.replace('skill_', '')}\n                            </text>\n                        </g>\n                    ))}\n                    {/* Ось X */}\n                    <line x1=\"0\" y1={chartHeight} x2={chartWidth} y2={chartHeight} stroke=\"#333\" />\n                </g>\n            </svg>\n        </div>\n    );\n};\n\nexport default BarChart;\n","import React from 'react';\n\nconst PieChart = ({ data }) => {\n    const chartSize = 400; // Размер диаграммы\n    const radius = chartSize / 2; // Радиус диаграммы\n    const filteredData = Object.entries(data).filter(([key]) => key !== 'total'); // Удаление 'total'\n    const total = filteredData.reduce((acc, [_, value]) => acc + value, 0); // Общая сумма всех значений\n\n    const getCoordinatesForPercent = (percent) => {\n        const x = Math.cos(2 * Math.PI * percent) * radius;\n        const y = Math.sin(2 * Math.PI * percent) * radius;\n        return [x, y];\n    };\n\n    let cumulativePercent = 0;\n\n    return (\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', padding: '20px' }}>\n            <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${chartSize} ${chartSize}`}>\n                <g transform={`translate(${radius}, ${radius})`}>\n                    {filteredData.map(([skill, value], index) => {\n                        const [startX, startY] = getCoordinatesForPercent(cumulativePercent);\n                        cumulativePercent += value / total;\n                        const [endX, endY] = getCoordinatesForPercent(cumulativePercent);\n\n                        const largeArcFlag = value / total > 0.5 ? 1 : 0;\n\n                        const pathData = [\n                            `M ${startX} ${startY}`, // Move\n                            `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY}`, // Arc\n                            `L 0 0`, // Line\n                        ].join(' ');\n\n                        return (\n                            <g key={skill}>\n                                <path d={pathData} fill={`hsl(${index * 360 / filteredData.length}, 70%, 50%)`} />\n                                <text\n                                    transform={`translate(${(startX + endX) / 2 * 0.6}, ${(startY + endY) / 2 * 0.6})`}\n                                    textAnchor=\"middle\"\n                                    alignmentBaseline=\"middle\"\n                                    fill=\"#000\"\n                                    fontSize=\"10\"\n                                >\n                                    {skill.replace('skill_', '')}\n                                </text>\n                            </g>\n                        );\n                    })}\n                </g>\n            </svg>\n        </div>\n    );\n};\n\nexport default PieChart;\n","import React, { useState, useEffect } from 'react';\nimport BarChart from '../../charts/BarChart.jsx';\nimport PieChart from \"../../charts/PieChart.jsx\";\n\nconst Skills = ({ token }) => {\n    const [totalSkill, setTotalSkill] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [userId, setUserId] = useState(null);\n\n    useEffect(() => {\n        const fetchUserId = async () => {\n            try {\n                const response = await fetch(\"https://01.kood.tech/api/graphql-engine/v1/graphql\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Authorization\": 'Bearer ' + token,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        query: `query {\n                            user {\n                                id\n                            }\n                        }`,\n                    })\n                });\n\n                const result = await response.json();\n                const user = result.data.user[0];\n                setUserId(user.id);\n            } catch (error) {\n                setError(error);\n                setIsLoading(false);\n            }\n        };\n\n        fetchUserId();\n    }, [token]);\n\n    useEffect(() => {\n        if (userId) {\n            const getTotalSkills = async () => {\n                try {\n                    const limit = 100;\n                    let skillsOffset = 0;\n                    let totalSkillArr = [];\n                    let totalSkill = {};\n                    let hasMoreData = true;\n\n                    while (hasMoreData) {\n                        const response = await fetch(\"https://01.kood.tech/api/graphql-engine/v1/graphql\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Authorization\": 'Bearer ' + token,\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({\n                                query: `query {\n                                    transaction (limit:${limit}, offset:${skillsOffset}, where:{\n                                        _and:[{userId:{_eq:${userId}}},{type:{_ilike:\"%skill%\"}}]\n                                        }\n                                    ){\n                                        type\n                                        amount\n                                        objectId\n                                        object{\n                                            name\n                                        }\n                                        createdAt\n                                        path\n                                    }\n                                }`,\n                            })\n                        });\n\n                        const result = await response.json();\n\n                        if (result.data.transaction.length > 0) {\n                            totalSkillArr.push(...result.data.transaction);\n                            skillsOffset += limit;\n                        } else {\n                            hasMoreData = false;\n                        }\n                    }\n\n                    totalSkillArr.forEach(skill => {\n                        if (!totalSkill.hasOwnProperty(skill.type)) {\n                            totalSkill[skill.type] = skill.amount;\n                        } else {\n                            totalSkill[skill.type] += skill.amount;\n                        }\n                    });\n\n                    let total = 0;\n                    for (let key in totalSkill) {\n                        total += totalSkill[key];\n                    }\n                    totalSkill.total = total;\n\n                    setTotalSkill(totalSkill);\n                    setIsLoading(false);\n                } catch (error) {\n                    setError(error);\n                    setIsLoading(false);\n                }\n            };\n\n            getTotalSkills();\n        }\n    }, [token, userId]);\n\n    if (isLoading) {\n        return <div>Загрузка...</div>;\n    }\n\n    if (error) {\n        return <div>Ошибка: {error.message}</div>;\n    }\n\n    const filteredSkills = Object.entries(totalSkill);\n\n    return (\n        <div style={{padding: '20px', maxWidth: '100%', boxSizing: 'border-box'}}>\n            <h1>Skills</h1>\n            <div style={{display: 'flex', justifyContent: 'center', flexWrap: 'wrap', marginBottom: '20px'}}>\n                <BarChart data={totalSkill}\n                          style={{flex: '1 1 45%', maxWidth: '100%', minWidth: '300px', boxSizing: 'border-box'}}/>\n                <PieChart data={totalSkill}\n                          style={{flex: '1 1 45%', maxWidth: '100%', minWidth: '300px', boxSizing: 'border-box'}}/>\n            </div>\n            <ul style={{\n                display: 'grid',\n                gridTemplateColumns: 'repeat(auto-fill, minmax(150px, 1fr))',\n                gap: '20px',\n                padding: '0',\n                listStyleType: 'none',\n                boxSizing: 'border-box',\n                margin: '0',\n            }}>\n                {filteredSkills.map(([skill, value]) => (\n                    <li key={skill} style={{\n                        marginBottom: '10px',\n                        width: 'calc(50% - 10px)',\n                        minWidth: '150px',\n                        boxSizing: 'border-box',\n                    }}>\n                        <strong><span className=\"red-label\">{skill.replace('skill_', '')}:</span></strong> {value}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Skills;\n","import React, { useEffect, useState } from 'react';\n\nconst UserProject = ({ token }) => {\n    const [xpTransactions, setXPTransactions] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedProjectPart, setSelectedProjectPart] = useState(\"\");\n    const [currentPage, setCurrentPage] = useState(1);\n    const transactionsPerPage = 5;\n\n    useEffect(() => {\n        const getUserXPTransactions = async () => {\n            try {\n                const response = await fetch(\"https://01.kood.tech/api/graphql-engine/v1/graphql\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Authorization\": 'Bearer ' + token,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        query: `query {\n                            transaction(where: { type: { _eq: \"xp\" } }) {\n                                type\n                                amount\n                                objectId\n                                object {\n                                    name\n                                }\n                                userId\n                                createdAt\n                                path\n                            }\n                        }`,\n                    })\n                });\n\n                const result = await response.json();\n                setXPTransactions(result.data.transaction);\n                setIsLoading(false);\n            } catch (error) {\n                setError(error);\n                setIsLoading(false);\n            }\n        };\n\n        getUserXPTransactions();\n    }, [token]);\n\n    if (isLoading) {\n        return <div>Загрузка...</div>;\n    }\n\n    if (error) {\n        return <div>Ошибка: {error.message}</div>;\n    }\n\n    const projectParts = Array.from(new Set(xpTransactions.map(transaction => {\n        const pathParts = transaction.path.split('/').filter(Boolean);\n        return pathParts[1];\n    })));\n\n    const filteredTransactions = selectedProjectPart\n        ? xpTransactions.filter(transaction => {\n            const pathParts = transaction.path.split('/').filter(Boolean);\n            return pathParts[1] === selectedProjectPart;\n        })\n        : xpTransactions;\n\n    const indexOfLastTransaction = currentPage * transactionsPerPage;\n    const indexOfFirstTransaction = indexOfLastTransaction - transactionsPerPage;\n    const currentTransactions = filteredTransactions.slice(indexOfFirstTransaction, indexOfLastTransaction);\n\n    const totalPages = Math.ceil(filteredTransactions.length / transactionsPerPage);\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n    if (filteredTransactions.length > transactionsPerPage) {\n        const pageButtons = [];\n\n        for (let i = 1; i <= totalPages; i++) {\n            const startIdx = (i - 1) * transactionsPerPage;\n            const endIdx = i * transactionsPerPage;\n            const pageTransactions = filteredTransactions.slice(startIdx, endIdx);\n\n            if (pageTransactions.length > 0) {\n                pageButtons.push(\n                    <li key={i} style={{ margin: '5px' }}>\n                        <button onClick={() => paginate(i)}>{i}</button>\n                    </li>\n                );\n            }\n        }\n\n        return (\n            <div className='user-project'>\n                <h1>XP Transactions</h1>\n                <select\n                    value={selectedProjectPart}\n                    onChange={(e) => setSelectedProjectPart(e.target.value)}\n                    style={{ marginBottom: '20px', padding: '10px', width: '300px' }}\n                >\n                    <option value=\"\">Select Project</option>\n                    {projectParts.map((part, index) => (\n                        <option key={index} value={part}>{part}</option>\n                    ))}\n                </select>\n                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                    {currentTransactions.map((transaction, index) => {\n                        const pathParts = transaction.path.split('/').filter(Boolean);\n                        return (\n                            <div key={index} style={{ width: '100%', marginBottom: '20px', padding: '20px', border: '1px solid #ddd', borderRadius: '8px', background: 'olive', boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n                                <p><strong><span className=\"red-label\">Type:</span></strong> {transaction.type}</p>\n                                <p><strong><span className=\"red-label\">Amount:</span></strong> {transaction.amount}</p>\n                                <p><strong><span className=\"red-label\">Object Name:</span></strong> {transaction.object.name}</p>\n                                <p><strong><span className=\"red-label\">Created:</span></strong> {new Date(transaction.createdAt).toLocaleString()}</p>\n                                <ul style={{ padding: 0, listStyle: 'none' }}>\n                                    {pathParts.map((part, partIndex) => (\n                                        partIndex === 1 && (\n                                            <React.Fragment key={partIndex}>\n                                                <p style={{ margin: 0 }}><strong><span className=\"red-label\">Project:</span></strong> {part}</p>\n                                            </React.Fragment>\n                                        )\n                                    ))}\n                                </ul>\n                            </div>\n                        );\n                    })}\n                </div>\n                <div style={{ marginTop: '20px' }}>\n                    <ul style={{ display: 'flex', justifyContent: 'center', listStyle: 'none', padding: 0, flexWrap: 'wrap' }}>\n                        {pageButtons}\n                    </ul>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className='user-project'>\n                <h1>XP Transactions</h1>\n                <select\n                    value={selectedProjectPart}\n                    onChange={(e) => setSelectedProjectPart(e.target.value)}\n                    style={{ marginBottom: '20px', padding: '10px', width: '300px' }}\n                >\n                    <option value=\"\">Select Project Part</option>\n                    {projectParts.map((part, index) => (\n                        <option key={index} value={part}>{part}</option>\n                    ))}\n                </select>\n                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                    {currentTransactions.map((transaction, index) => {\n                        const pathParts = transaction.path.split('/').filter(Boolean);\n                        return (\n                            <div key={index} style={{ width: '100%', marginBottom: '20px', padding: '20px', border: '1px solid #ddd', borderRadius: '8px', background: 'olive', boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n                                <p><strong><span className=\"red-label\">Type:</span></strong> {transaction.type}</p>\n                                <p><strong><span className=\"red-label\">Amount:</span></strong> {transaction.amount}</p>\n                                <p><strong><span className=\"red-label\">Object Name:</span></strong> {transaction.object.name}</p>\n                                <p><strong><span className=\"red-label\">Created:</span></strong> {new Date(transaction.createdAt).toLocaleString()}</p>\n                                <ul style={{ padding: 0, listStyle: 'none' }}>\n                                    {pathParts.map((part, partIndex) => (\n                                        partIndex === 1 && (\n                                            <React.Fragment key={partIndex}>\n                                                <p style={{ margin: 0 }}><strong><span className=\"red-label\">Project:</span></strong> {part}</p>\n                                            </React.Fragment>\n                                        )\n                                    ))}\n                                </ul>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default UserProject;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst Logout = () => {\n    const navigate = useNavigate();\n\n    const handleLogout = () => {\n        localStorage.removeItem('token');\n        navigate('/login');\n        window.location.reload();\n    };\n\n    return (\n        <button className=\"logout-button\" onClick={handleLogout}>Logout</button>\n    );\n};\n\nexport default Logout;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport UserProfile from \"../home/profile/userprofile/UserProfile.jsx\";\nimport Skils from \"../home/profile/Skills/Skils.jsx\";\nimport UserProject from \"../home/profile/userproject/UserProject.jsx\";\nimport Logout from \"../auth/logout/Logout.jsx\";\n\nconst LoginPage = () => {\n    const [identifier, setIdentifier] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [token, setToken] = useState('');\n\n    const handleLogin = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await axios.post('https://01.kood.tech/api/auth/signin', {}, {\n                auth: {\n                    username: identifier,\n                    password: password\n                }\n            });\n            const token = response.data;\n            localStorage.setItem('token', token);\n            setToken(token);\n            setIsLoggedIn(true);\n        } catch (err) {\n            console.error('Error during login:', err);\n            setError('Invalid username/email or password');\n        }\n    };\n\n    return (\n        <div>\n            {isLoggedIn ? (\n                <>\n                    <div className=\"header\">\n                        <h1 style={{marginRight: 'auto'}}>Welcome</h1>\n                        <Logout />\n                    </div>\n\n                    <div className=\"container\">\n                        <div className=\"block\">\n                            <h1>Профиль пользователя</h1>\n                            <UserProfile token={token}/>\n                        </div>\n                        <div className=\"block\">\n                            <Skils token={token}/>\n                        </div>\n                        <div className=\"block\">\n                            <UserProject token={token}/>\n                        </div>\n                    </div>\n                </>\n            ) : (\n                <div className=\"login-container\">\n                    <form className=\"login-form\" onSubmit={handleLogin}>\n                        <h2>Login</h2>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username/Email:</label>\n                            <input type=\"text\" id=\"username\" value={identifier}\n                                   onChange={(e) => setIdentifier(e.target.value)}/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password:</label>\n                            <input type=\"password\" id=\"password\" value={password}\n                                   onChange={(e) => setPassword(e.target.value)}/>\n                        </div>\n                        <button type=\"submit\">Login</button>\n                        {error && <p className=\"error-message\">{error}</p>}\n                    </form>\n                </div>\n\n            )}\n        </div>\n    );\n};\n\nexport default LoginPage;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport './assets/styles/global.css'\nimport {RouterProvider, createBrowserRouter} from \"react-router-dom\";\nimport LoginPage from \"./components/screens/auth/LoginPage.jsx\";\n\nconst router = createBrowserRouter([\n    {\n        path: '/',\n        element: <LoginPage />,\n    },\n    {\n        path: '/login',\n        element: <LoginPage />,\n    }\n]);\n\nReactDOM.createRoot(document.getElementById('root')).render(\n    <React.StrictMode>\n        <RouterProvider router={router}/>\n    </React.StrictMode>,\n)\n"],"sourceRoot":""}